#!/usr/bin/env python3

# make-pdf - Koray's managment tool for scanned documents
# Copyright (C) 2022 Koray Ulusan
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import os
import re
import subprocess
import sys

import click

HOME = "/Users/koray"
scans_folder = f"{HOME}/Documents/Scans"

pdf_outpath = f"{HOME}/Desktop"
pdf_author = "Koray Ulusan"


# !--- internal stuff below ---


class ProgramExist(Exception):
    """base exception for this program"""
    pass


class ExitSuccess(ProgramExist):
    """raised upon successful execution"""
    pass


class ExitFail(ProgramExist):
    """raised upon failed execution"""
    pass


class path(str):
    """a thin wrapper for paths"""
    # most of this is boilerplate. Maybe getting more familiar with `os.path`
    # was better but I've already coded this. And it makes the code more
    # readable.

    def __init__(self, fullpath) -> None:
        super().__init__()

        if fullpath[0] != "/":
            raise ValueError("path must be an absoulte path, not relative")
        self.fullpath = fullpath.rstrip("/")

    def __repr__(self) -> str:
        return self.fullpath

    def __str__(self) -> str:
        return self.fullpath

    @property
    def exists(self):
        return os.path.exists(self.fullpath)

    @property
    def is_file(self):
        return os.path.isfile(self.fullpath)

    @property
    def is_folder(self):
        return os.path.isdir(self.fullpath)

    @property
    def ext(self):
        """extension of file, starting with a dot"""
        if self.is_file:
            return os.path.splitext(self.fullpath)[1]
        return ""

    @property
    def name(self):
        """file/folder name without path"""
        if self.is_folder:
            return os.path.split(self.fullpath)[1]
        return os.path.basename(self.fullpath)

    @property
    def basename(self):
        """name without path and extension"""
        if self.is_folder:
            return os.path.split(self.fullpath)[1]
        return os.path.splitext(self.name)[0]

    @property
    def parent(self):
        """path of where this file/folder is located"""
        if self.is_folder:
            return path(os.path.split(self.fullpath)[0])
        return path(os.path.dirname(self.fullpath))

    @property
    def size(self):
        """path of where this file/folder is located"""
        return os.path.getsize(self.fullpath)

    @property
    def short_path(self):
        """returns `fish` shell style path

        eg `~/foo/Bar/baz` -> `~/f/B/baz`
        """
        # aka prompt_pwd
        path_elements = self.fullpath.split("/")
        fish = "/".join([foldername[0] for foldername in path_elements[1:]])
        return "~/" + fish[4:-1] + self.name

    @staticmethod
    def getkey(self):
        # NOTE: this may break in the future iff the name `Scan XX` changes.
        # BUG: jpeg/jpg files may collide with png files and there isn't a trivial solution to this.

        file_number = self.basename[len("Scan"):].lstrip()

        # if there is more than 10**10 files inside folder this doesn't work.
        key = f"{file_number.zfill(10)}{self.ext}"
        return key

    @property
    def childeren(self):
        """return childeren elements inside this folder"""
        if not self.is_folder:
            raise NotADirectoryError("Cannot get child files/folders of a non-dir")
        return (path(f'{self.fullpath}/{f}') for f in os.listdir(self.fullpath))

    def get_scans(self, *, ordered=True):
        """returns all scans inside folder with version sort

        Params:
            `ordered=True` requires extra calculations
        """
        if not self.exists:
            # print(f"Warning: {self.short_path} does not exists.")
            return []

        supported_filetypes = [".png", ".jpg", ".jpeg"]

        file_names = [f for f in self.childeren
                      if any((f.ext == ext for ext in supported_filetypes))]

        if ordered:
            return [f for f in sorted(file_names, key=self.getkey)]
        return [f for f in file_names]

    @ property
    def get_scan_count(self):
        """Gets the number of scans inside `folder`

        Since they are (kind of) 0 indexed this is the next scans number.

        Note: Scanner names files in an ugly fashion
            Scan.png
            Scan 1.png
            Scan 2.png
            ...
        """
        return len(self.get_scans(ordered=False))


class TempDir:
    def __init__(self, path: path):
        self.path = path

    def __enter__(self):
        subprocess.run(["rm", "-rf", self.path], check=True)
        subprocess.run(["mkdir", self.path], check=True)
        return self.path

    def __exit__(self, exception_type, exception_value, traceback):
        subprocess.run(["rm", "-rf", self.path], check=True)


# * Program functionality functions below.


scans_folder = path(scans_folder)
pdf_outpath = path(pdf_outpath)

last_unwrap_save = path(f"{scans_folder}/.last_unwrap_save")

makepdf_help = f"""make-pdf - Koray's managment tool for scanned documents

Parameters:
  -h, --help        show this help message and exit

  <name>            creates a pdf called <name> on {pdf_outpath.short_path}
                    and then moves images to a folder called <name>. To disable
                    this behavior pass `-nw` to args

  ls                `ls {scans_folder.short_path}`
  ll                `ls -lh {scans_folder.short_path}`
  open              `open {scans_folder.short_path}`

  unwrap <folder>   move <folder> contents to {scans_folder.short_path}
  wrap <?folder>    moves files of {scans_folder.short_path} to <?folder>
                    if no <?folder> is given. wraps to last unwrap.

Usage:
  make-pdf <name>
  make-pdf ll
  make-pdf open
  make-pdf unwrap <folder>
  make-pdf wrap <?folder>
"""


def unwrap(folder_name):
    unwrap_path = path(f"{scans_folder}/{folder_name}")

    if not unwrap_path.exists:
        raise ExitFail(f"{unwrap_path.name} does not exists.")

    if scans_folder.get_scan_count:
        print(f"There are {scans_folder.get_scan_count} files in {scans_folder.short_path}. "
              f"Unwrapping will append these files at the end of currently scanned documents. "
              f"There is no undo."
              )
        if not click.confirm(f"Are you sure to unwrap {unwrap_path.short_path}?"):
            raise ExitSuccess("ok")

        # rename and move
        for i, f in enumerate(unwrap_path.get_scans(),
                              start=scans_folder.get_scan_count):
            filename = path(f"{scans_folder}/Scan {i}{f.ext}")
            subprocess.run(["mv", f, filename], check=True)

    else:
        subprocess.run(["mv"] + unwrap_path.get_scans(ordered=False) + [scans_folder],
                       check=True)

    subprocess.run(["rm", "-d", unwrap_path], check=True)

    # save the name for later use.
    with open(last_unwrap_save, 'w') as f:
        f.write(folder_name)
    print(f"unwrapped {unwrap_path.name} to {scans_folder.short_path}")


def wrap(folder_name):
    """wraps scans to a folder"""
    if scans_folder.get_scan_count == 0:
        raise ExitFail(f"{scans_folder.short_path} has no images")

    wrap_path = path(f"{scans_folder}/{folder_name}")

    if wrap_path.get_scan_count >= 1:
        # folder may exist but shoudn't have files in it
        raise ExitFail(f"{wrap_path.short_path} has {wrap_path.get_scan_count} files."
                       " Aborting wrap.")

    # create `wrap_path` if not exists
    subprocess.run(["mkdir", "-p", wrap_path], check=True)

    subprocess.run(["mv"] + scans_folder.get_scans(ordered=False) + [wrap_path], check=True)

    # upon successful wraping remove
    subprocess.run(["rm", "-f", last_unwrap_save])
    print(f"wrapped to {wrap_path.name}")


def create_pdf(pdf_name):
    if scans_folder.get_scan_count == 0:
        raise ExitFail(f"{scans_folder} has no images")

    with TempDir(path(f"{scans_folder}/.temp")) as tempdir:

        # linking files to save space.
        for f in scans_folder.get_scans(ordered=False):
            subprocess.run(["ln", f, f"{tempdir}/{f.name}"], check=True)

        pdf_file = path(f"{tempdir}/{pdf_name}.pdf")
        pdf_file_converted = path(f"{tempdir}/{pdf_name}_converted.pdf")

        # creating pdf
        # Note: removing alpha channel from `png`s doesn't speed up the process.
        subprocess.run(["img2pdf"] + tempdir.get_scans()
                       + ["--nodate", "--pagesize", "A4", "--viewer-fit-window", "--output", pdf_file],
                       check=True)

        keywords = re.split("|".join(r' _-\.='), pdf_name)
        pdf_metadata = [
            "-define", f"pdf:Title={pdf_name}",
            "-define", f"pdf:author={pdf_author}",
            "-define", "pdf:creator=https://github.com/KorayUlusan/make-pdf",
            "-define", "pdf:Producer=img2pdf, imagemagick",
            "-define", f"pdf:keywords={', '.join(keywords)}",
        ]

        # optimize pdf
        subprocess.run([
            "convert",
            "-density", "200x200",
            "-quality", "60",
            "-compress", "jpeg"]
            + pdf_metadata
            + [pdf_file, pdf_file_converted],
            check=True
        )

        if pdf_file_converted.size < pdf_file.size:
            # if compression is sucessful
            subprocess.run(["mv", "-f", pdf_file_converted, pdf_file], check=True)
        else:
            subprocess.run(["convert"] + pdf_metadata + [pdf_file, pdf_file_converted],
                           check=True
                           )

            # TODO find a better way to compress files.
            print("for best results scan at 200dpi")

        outfile = path(f"{pdf_outpath}/{pdf_name}")
        if outfile.exists:
            print(f"Overwriting file {outfile.short_path} on {outfile.parent.short_path}")

        subprocess.run(["mv", pdf_file, pdf_outpath], check=True)


def parse(args) -> dict:
    """parses program args"""
    if len(args) == 1:
        print(makepdf_help)
        raise ExitFail("Missing args.")

    p = {
        "process_name": None,
    }

    if "-h" in args or "-h" in args:
        p["process_name"] = "help"
    elif "ls" in args:
        p["process_name"] = "ls"
    elif "ll" in args:
        p["process_name"] = "ll"
    elif "open" in args:
        p["process_name"] = "open_folder"

    elif "unwrap" in args:
        p["process_name"] = "unwrap"

        if len(args) >= 3:
            p["folder_name"] = args[2]
        else:
            raise ExitFail("please give which folder to unwrap")

    elif "wrap" in args:
        p["process_name"] = "wrap"

        if len(args) >= 3:
            p["folder_name"] = args[2]
        else:
            print(f"No wrap name is given. Checking {last_unwrap_save.short_path}")
            try:
                with open(last_unwrap_save, 'r') as f:
                    unwrap_contents = f.read()
            except FileNotFoundError:
                raise ExitFail("last unwrap does not exists. Please give a wrap name")

            if unwrap_contents == "":
                raise ExitFail("last unwrap is unknown. Please give a wrap name")

            p["folder_name"] = unwrap_contents

            if not click.confirm(f"Wrap files to {p['folder_name']}?"):
                raise ExitSuccess("ok")

            print(f"Wrapping to: {p['folder_name']}")

    else:
        p["process_name"] = "create_pdf"

        p["no_wrap"] = "-nw" in args
        while "-nw" in args:
            args.remove("-nw")

        p["folder_name"] = p["pdf_name"] = args[1]

    return p


def clean_exits(func):
    def wrapper():
        try:
            func()
        except ExitSuccess as e:
            print(e.args[0])
            exit(0)
        except ExitFail as e:
            print(e.args[0])
            exit(1)
        except ProgramExist:
            print("something went wrong")
            exit(1)

    return wrapper


@clean_exits
def main():
    args = parse(sys.argv)

    match args["process_name"]:
        case "help":
            print(makepdf_help)

        case "ls":
            subprocess.run(["ls", "-pG", scans_folder])

        case "ll":
            subprocess.run(["ls", "-lhpG", scans_folder])

        case "open_folder":
            # reveals file contents in `Finder.app`
            subprocess.run(["open", scans_folder])

        case "unwrap":
            unwrap(args["folder_name"])

        case "wrap":
            wrap(args["folder_name"])

        case "create_pdf":  # this is the main functionality of this program.
            # precheck for 'wrap'ability, copied from checked inside `wrap`
            wrap_path = path(f"{scans_folder}/{args['folder_name']}")
            if wrap_path.get_scan_count >= 1:
                raise ExitFail(f"{wrap_path.short_path} has {wrap_path.get_scan_count} files."
                               " Please give `-nw` as argument to disable wrapping after pdf creation."
                               " Aborting wrap.")

            create_pdf(args["pdf_name"])

            if not args["no_wrap"]:
                wrap(args["folder_name"])


if __name__ == "__main__":
    main()
